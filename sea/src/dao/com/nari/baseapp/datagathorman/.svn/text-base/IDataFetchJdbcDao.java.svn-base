package com.nari.baseapp.datagathorman;

import java.util.List;
import java.util.Map;

import com.nari.privilige.PSysUser;
import com.nari.util.exception.DBAccessException;
import com.nari.util.exception.ServiceException;

public interface IDataFetchJdbcDao {
	
	/***
	 * 得到一个透明规约编码的父项是多少
	 * @return 如果没有父项 返回null
	 * @throws DBAccessException 
	 * **/
	public String getFather(String clearNo) throws DBAccessException;
	/**
	 * 查找一个用户所有的组合和其中的项生成后的格式 格式如下,默认包含共享的项目<br>
	 * {组合的名称,用户编号,有效天数，创建时间，是否共享,是不是自己的组合}:{[<br>
	 * clearNo，<br>
	 * 透明规约的名称,<br>
	 * 规约的类型，//（一类，二类）<br>
	 * 标示,<br>
	 * 是否可能修改<br>
	 * ]<br>
	 * }<br>
	 * 经查询透明公约的长度全部是6 
	 * <br><br>
	 * 此方法主要是直接生成便于前台处理的数据结构
	 *  @author huangxuan
	 * @param staffNo 工作人员编号
	 * @return 返回的格式中key采用驼峰命名法
	 * *
	 **/
	@SuppressWarnings("unchecked")
	public Map<Map,List> findAllCombi(final String staffNo) throws DBAccessException;
	
	/***
	 * 通过一定的约定格式来进行更新 发生任何错误都会回滚 <br>
	 * combiEdit <br>
	 * combiDel <br>
	 * itemDel <br>
	 * itemAdd <br>
	 * @param list 字符串标示的命名列表<br>
	 * 可能能发生效果的命令名称为
	 * combiName newName staffNo isShare status clearProtNo  combiId validDays
	 * @param staffNo 工作人员的列表
	 ****/
	public void updateMain(List<String> list, String staffNo)
			throws DBAccessException;
	/*****
	 *通过透明编码的列表得到透明编码所对应的名称 
	 * 
	 * *****/
	public Map<String,String> findCodeName(List<String> list) throws DBAccessException;
	
	/***
	 * 通过combiId查找所有的某一个名字组合下的透明公约编码，内部进行去重名
	 * @param combiId
	 * ****/
	public List<String> findCodesByName(String combiId) throws DBAccessException;
	/***
	 * 通过dataid得到dataId和测量点之间对应关系的map
	 * 如果没有找到，返回null
	 * @param dataIds 数据的id列表
	 * @return dataid和相互关联的pt的列表
	 * *****/
	public Map<String,String> findDataIdPn(List dataIds) throws DBAccessException;
	/***
	 * 找到数据类型与数据类型名称的关系
	 * @return 数据类型和值的对应关系
	 * ****/
	public Map<String, String> mapTypeName() throws DBAccessException;
	/******
	 * 通过事件编码号找到时间的名称
	 * ******/
	@SuppressWarnings("unchecked")
	public Map<String,String> mapEventName(List nos) throws DBAccessException;
	/******通过规约得到数据的类型
	 * @list 规约名称的list
	 * @return map 规约名称和数据类型之间的关联
	 * ******/
	public Map<String,String> findCodeDataType(List<String> list) throws DBAccessException;
	/***
	 * 通过id来查找组合的名称
	 * 如果没有找到返回组合null
	 * @param combiId 
	 * @return 组合的名称
	 * ****/
	String findNameById(String combiId);
	/***
	 * 通过id来查找组合下的所有的编码
	 * @param combiId 组合项的id
	 * ***/
	List<String> findItemsById(PSysUser user, String combiId)
			throws DBAccessException;
	/***
	 * 通过大项的列表来找到大项和大项所对应的名称 请确保codes中的项都为大项
	 * @param codes 透明编码的列表
	 * @throws DBAccessException
	 * @throws ServiceException
	 *             *
	 **/
	Map<String, String> findBigCodeToName(List<String> codes)
			throws DBAccessException;
	/*******
	 * 通过终端资产号和pns来找到对应的表下面的用户名和用户编号
	 * @param tmnlNo 终端资产号
	 * @param pns 所对应的pn的列表
	 * @return 返回一个key格式为终端资产号_pn
	 * 值为一个map 其中的key为consNo 和consName
	 * *****/
	Map<String, Map<String, String>> findMeterCons(String tmnlNo,
			List<String> pns) throws DBAccessException;
	/**
	 * 通过资产号得到其下的采集器，以及采集器下面对应的表
	 * @param tmnlAssetNo
	 */
	
	Map<String, List> findFrmToAsset(String tmnlAssetNo);
	
}