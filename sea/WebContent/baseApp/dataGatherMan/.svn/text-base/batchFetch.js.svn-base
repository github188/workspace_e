/*******************************************************************************
 * 
 * //打开原始报文 /* 弹出原始报文窗口
 */
var rendererConfig = {
	createWorksheet : function(includeHidden, notIncludeData) {
		// Calculate cell data types and extra class names which affect
		// formatting
		var cellType = [];
		var cellTypeClass = [];
		var cm = this.getColumnModel();
		var totalWidthInPixels = 0;
		var colXml = '';
		var headerXml = '';
		var visibleColumnCountReduction = 0;
		var colCount = cm.getColumnCount();
		for (var i = 0; i < colCount; i++) {
			if ((cm.getDataIndex(i) != '')
					&& (includeHidden || !cm.isHidden(i))) {
				var w = cm.getColumnWidth(i)
				totalWidthInPixels += w;
				if (cm.getColumnHeader(i) === "") {
					cellType.push("None");
					cellTypeClass.push("");
					++visibleColumnCountReduction;
				} else {
					colXml += '<ss:Column ss:AutoFitWidth="1" ss:Width="' + w
							+ '" />';
					headerXml += '<ss:Cell ss:StyleID="headercell">'
							+ '<ss:Data ss:Type="String">'
							+ cm.getColumnHeader(i)
							+ '</ss:Data>'
							+ '<ss:NamedCell ss:Name="Print_Titles" /></ss:Cell>';
					var fld = this.store.recordType.prototype.fields.get(cm
							.getDataIndex(i));
					fld = fld || {};
					switch (fld.type) {
						case "int" :
							cellType.push("Number");
							cellTypeClass.push("int");
							break;
						case "float" :
							cellType.push("Number");
							cellTypeClass.push("float");
							break;
						case "bool" :
						case "boolean" :
							cellType.push("String");
							cellTypeClass.push("");
							break;
						case "date" :
							cellType.push("DateTime");
							cellTypeClass.push("date");
							break;
						default :
							cellType.push("String");
							cellTypeClass.push("");
							break;
					}
				}
			}
		}
		var visibleColumnCount = cellType.length - visibleColumnCountReduction;

		var result = {
			height : 9000,
			width : Math.floor(totalWidthInPixels * 30) + 50
		};

		var rowCount = 0;
		if (!notIncludeData)
			rowCount = (this.store.getCount() + 2);
		else
			rowCount = "rowCountToreplace";
		// Generate worksheet header details.
		var t = '<ss:Worksheet ss:Name="'
				+ this.title
				+ '">'
				+ '<ss:Names>'
				+ '<ss:NamedRange ss:Name="Print_Titles" ss:RefersTo="=\''
				+ this.title
				+ '\'!R1:R2" />'
				+ '</ss:Names>'
				+ '<ss:Table x:FullRows="1" x:FullColumns="1"'
				+ ' ss:ExpandedColumnCount="'
				+ (visibleColumnCount + 2)
				+ '" ss:ExpandedRowCount="'
				+ rowCount
				+ '">'
				+ colXml
				+ '<ss:Row ss:Height="38">'
				+ '<ss:Cell ss:StyleID="title" ss:MergeAcross="'
				+ (visibleColumnCount - 1)
				+ '">'
				+ '<ss:Data xmlns:html="http://www.w3.org/TR/REC-html40" ss:Type="String">'
				+ '<html:B>Generated by ExtJS</html:B></ss:Data><ss:NamedCell ss:Name="Print_Titles" />'
				+ '</ss:Cell>' + '</ss:Row>' + '<ss:Row ss:AutoFitHeight="1">'
				+ headerXml + '</ss:Row>';

		// Generate the data rows from the data in the Store
		if (!notIncludeData) {
			var it = this.store.data.items;
			if (this.local == true) {
				it = [];
				Ext.iterate(this.store.mainData.baseData, function(k, v) {
							it.push(v);
						});
			}

			for (var i = 0, l = it.length; i < l; i++) {
				t += '<ss:Row>';
				var cellClass = (i & 1) ? 'odd' : 'even';
				r = this.local && it[i] || it[i].data;
				var k = 0;
				for (var j = 0; j < colCount; j++) {
					if ((cm.getDataIndex(j) != '')
							&& (includeHidden || !cm.isHidden(j))) {
						var v = "";
						if (cm.getRenderer(j)) {
							// v = cm.getRenderer(j)(r[cm.getDataIndex(j)],
							// null, new Ext.data.Record(r))
							// + "";
							v = cm.getRenderer(j).call(cm.config[j],
									r[cm.getDataIndex(j)], null,
									new Ext.data.Record(r))
									+ "";
							v = v.replace(/<.*?>/g, "");
						} else {
							v = r[cm.getDataIndex(j)];
						}

						if (cellType[k] !== "None") {
							t += '<ss:Cell ss:StyleID="' + cellClass
									+ cellTypeClass[k] + '"><ss:Data ss:Type="'
									+ cellType[k] + '">';
							if (cellType[k] == 'DateTime') {
								t += v.format('Y-m-d');
							} else {
								t += v;
							}
							t += '</ss:Data></ss:Cell>';
						}
						k++;
					}
				}
				t += '</ss:Row>';
			}
		} else {
			for (var i = 0, it = data.baseData, l = it.length; i < l; i++) {
				t += '<ss:Row>';
				var cellClass = (i & 1) ? 'odd' : 'even';
				r = it[i];
				var k = 0;
				for (var j = 0; j < colCount; j++) {
					if ((cm.getDataIndex(j) != '')
							&& (includeHidden || !cm.isHidden(j))) {
						var v = "";
						if (cm.getRenderer(j)) {
							v = cm.getRenderer(j)(r[cm.getDataIndex(j)], null,
									new Ext.data.Record(r))
									+ "";
							v = v.replace(/<.*?>/g, "");
						} else {
							v = r[cm.getDataIndex(j)];
						}

						if (cellType[k] !== "None") {
							t += '<ss:Cell ss:StyleID="' + cellClass
									+ cellTypeClass[k] + '"><ss:Data ss:Type="'
									+ cellType[k] + '">';
							if (cellType[k] == 'DateTime') {
								t += v.format('Y-m-d');
							} else {
								t += v;
							}
							t += '</ss:Data></ss:Cell>';
						}
						k++;
					}
				}
				t += '</ss:Row>';
			}

		}

		result.xml = t
				+ '</ss:Table>'
				+ '<x:WorksheetOptions>'
				+ '<x:PageSetup>'
				+ '<x:Layout x:CenterHorizontal="1" x:Orientation="Landscape" />'
				+ '<x:Footer x:Data="Page &amp;P of &amp;N" x:Margin="0.5" />'
				+ '<x:PageMargins x:Top="0.5" x:Right="0.5" x:Left="0.5" x:Bottom="0.8" />'
				+ '</x:PageSetup>' + '<x:FitToPage />' + '<x:Print>'
				+ '<x:PrintErrors>Blank</x:PrintErrors>'
				+ '<x:FitWidth>1</x:FitWidth>'
				+ '<x:FitHeight>32767</x:FitHeight>' + '<x:ValidPrinterInfo />'
				+ '<x:VerticalResolution>600</x:VerticalResolution>'
				+ '</x:Print>' + '<x:Selected />'
				+ '<x:DoNotDisplayGridlines />'
				+ '<x:ProtectObjects>False</x:ProtectObjects>'
				+ '<x:ProtectScenarios>False</x:ProtectScenarios>'
				+ '</x:WorksheetOptions>' + '</ss:Worksheet>';
		return result;
	}
};

window.origFrameQryShow = function(consNo, consName, tmnlAssetAddr) {
	staticConsNo = consNo;
	staticConsName = consName;
	staticTmnlAssetAddr = tmnlAssetAddr;
	openTab("原始报文查询", "./baseApp/dataGatherMan/origFrameQry.jsp", false,
			"origFrameQry");
}
/**
 * 
 * @param {}
 *            sec 秒
 */
function parseTime(sec) {
	var untis = ["日", "时", "分", "秒"];
	var times = [86400, 3600, 60, 1];
	var rs = [];
	var s = sec;
	var i = 0;
	while (i < 4) {
		var v = parseInt(s / times[i]);
		if (v) {
			rs.push(v + untis[i]);
		}
		s = s % times[i];
		i++;
	}
	return rs.join("");
}

// grid解锁
function unlockGrid() {
	sm.unlock();
	userGridPanel.onEnable();
	userGridPanel.getBottomToolbar().enable();
	Ext.getCmp('bf_allSelect').setValue(false);
}

// grid解锁
function lockGrid() {
	sm.lock();
	userGridPanel.onDisable();
	userGridPanel.getBottomToolbar().disable();
}

// * ******@author hx/ /***全局store
/** *************************************************************************** */
// 记录召测组合的store
var fetchComStore = new Ext.data.JsonStore({
			url : "baseapp/batchFetch!findCombi.action",
			root : "resultList",
			fields : ["combiId", "combiName", "staffNo", "dataGroup"]
		});
// 记录召测项的store
var fetchComItemStore = new Ext.data.JsonStore({
			url : "baseapp/batchFetch!findCombiItem.action",
			root : "resultList",
			fields : ["protocolNo", "protocolName", "dataGroup"]
		});
var batchFetchRadioGroup = new Ext.form.RadioGroup({
			id : "bf_rgp",
			width : 380,
			border : true,
			defaults : {
				style : {
					paddingLeft : "10px"
				}
			},
			columns : [80, 80, 80],
			items : [{
						boxLabel : '实时数据',
						name : 'queryType',
						inputValue : 1,
						checked : true
					}, {
						boxLabel : '历史数据',
						name : 'queryType',
						inputValue : 2
					}, {
						boxLabel : '事件数据',
						name : 'queryType',
						inputValue : 3
					}],
			listeners : {
				change : function(rgp, r) {

					if (r.inputValue == 1) {
						datePanel.hide();
					} else {
						datePanel.show();

					}
					if (r.inputValue == 3) {
						msgAndEventLevel.show();
						msgAndPoints.hide();
					} else {
						msgAndEventLevel.hide();
						msgAndPoints.show();
					}
					// datePanel.doLayout();
					if (r.inputValue == 3 || r.inputValue == "3") {
						fetchComItemStore.removeAll();
						fetchComStore.removeAll();
						return;
					}
					fetchComItemStore.removeAll();
					fetchComStore.load({
								params : {
									type : r.inputValue
								}
							});
				}
			}
		});

/** **更多的测量点** */
// 复用说明:morePanel.points是个数组，存放在更多面板中的值
// 一个字符串来记录测量点
// 选择的checkboxgroup
var moreGroup = new Ext.form.CheckboxGroup({
			columns : 8,// 每行显示八个数
			border : false,
			autoScroll : true,
			hideLabel : true,
			style : "padding:20px 10px 0px 10px;",
			items : [{
						boxLabel : 5,
						name : "dataFetch_9",
						inputValue : 5
					}, {
						boxLabel : 6,
						name : "dataFetch_10",
						inputValue : 6
					}, {
						boxLabel : 7,
						name : "dataFetch_11",
						inputValue : 7
					}, {
						boxLabel : 8,
						name : "dataFetch_12",
						inputValue : 8
					}, {
						boxLabel : 9,
						name : "dataFetch_13",
						inputValue : 9
					}, {
						boxLabel : 10,
						name : "dataFetch_14",
						inputValue : 10
					}, {
						boxLabel : 11,
						name : "dataFetch_15",
						inputValue : 11
					}, {
						boxLabel : 12,
						name : "dataFetch_16",
						inputValue : 12
					}]
		});

/** ***清除所有的测量点*** */
var buttonClearAllPoints = new Ext.Panel({
			border : false,
			layout : "form",
			items : [{
						xtype : "button",
						text : "清除",
						handler : function(btn) {
							var datafetch_point = Ext
									.getCmp("batchfetch_point");
							Ext.each(datafetch_point.items.items, function(i) {
										i.setValue(false);
									});
							Ext.each(moreGroup.items.items, function(i) {
										i.setValue(false);
									});
							morePanel.points = [];
						}
					}]
		});
// 更多面板
var morePanel = new Ext.Window({
	title : "测量点/总加组号",
	layout : "fit",
	modal : true,
	items : [moreGroup],
	height : 400,
	width : 400,
	closeAction : "hide",
	buttonAlign : "center",
	buttons : [{
				iconCls : "plus",
				handler : function() {
					addPoints();
				}
			}, {
				text : "全选",
				handler : function() {
					var ps = [];
					var flat = true;
					if (moreGroup.getValue().length == moreGroup.items.length) {
						flat = false;
					}
					// morePanel.points = [];
					Ext.each(moreGroup.items.items, function(c) {
								// if (c.getValue()) {
								// morePanel.points.push(c.boxLabel);
								// }
								ps.push(flat);
							});
					moreGroup.setValue(ps);
				}
			}, {
				text : "确定",
				handler : function() {
					morePanel.hide();
					// morePanel.check(moreGroup.getValue());
					morePanel.points = [];
					Ext.each(moreGroup.items.items, function(c) {
						if (c.getValue()) {
							morePanel.points.push(c.boxLabel);
						}
							// c.setValue(false);
						});
				}
			}, buttonClearAllPoints],
	listeners : {
		"beforeshow" : function() {
			Ext.each(moreGroup.items.items, function(c) {

						if (morePanel.points.indexOf(parseInt(c.boxLabel)) >= 0) {
							c.setValue(true);
						} else {
							c.setValue(false);
						}
					});
		}
	}
});
/** **初始化*** */
morePanel.points = [];
morePanel.init = function() {
	morePanel.points = [], Ext.each(moreGroup.items.items, function(c) {
				c.setValue(false);
			});
}
/** ***** */
/** *为一个checkgroup中添加一个checkbox,@param label 为添加的值*** */
var addPoint = function(id, label) {
	id = typeof id == "string" ? Ext.getCmp(id) : id;
	var tNum = id.items.length;
	var items = id.items;
	var columns = id.panel.items;
	var column = columns.itemAt(items.getCount() % columns.getCount());
	var ck = new Ext.form.Checkbox({
				boxLabel : label,
				name : "dataFetch_" + label,
				inputValue : label
			});
	var checkboxItem = column.add(ck);
	id.items.add(checkboxItem);
	// id.doLayout();
};
/** *****增加一行********* */
function addPoints() {
	var start = moreGroup.items.length + 7 - 3;
	for (var i = start + 1; i <= start + 8; i++) {
		addPoint(moreGroup, i);
	}
	moreGroup.doLayout();
}
/** ***********更多测量点结束***************** */
var moreBtn = new Ext.Button({
			text : "更多",
			width : 50,
			handler : function() {
				morePanel.show();
			}
		});
var pointCheckBox = new Ext.Panel({
			border : false,
			anchor : "100%",
			layout : 'table',
			labelWidth : 50,
			bodyStyle : 'padding:10px 0px 0px 0px;',
			layoutConfig : {
				columns : 2
			},
			// labelAlign:"right",
			items : [{
						xtype : 'checkboxgroup',
						hideLabel : true,
						columns : [30, 30, 30, 30, 40],
						labelStyle : "text-align:right;width:50;",
						id : "batchfetch_point",
						items : [{
									boxLabel : '0',
									name : "test_abc0"
								}, {
									boxLabel : '1',
									checked : true,
									name : "test_abc1"
								}, {
									boxLabel : '2',
									name : "test_abc2"
								}, {
									boxLabel : '3',
									name : "test_abc3"
								}, {
									boxLabel : '4',
									name : "test_abc4"
								}]
					}, moreBtn]
		});

/** *更多测量点ui部分结束** */
var commonCheckBox = new Ext.Panel({
			border : false,
			layout : 'form',
			hideLabels : true,
			bodyStyle : 'padding:0px, 0px, 0px, 10px',
			width : 200,
			items : [{
						xtype : 'checkbox',
						border : false,
						boxLabel : '透明转发(T)'
					}]
		});
var smCombi = new Ext.grid.RowSelectionModel({
			singleSelect : true,
			listeners : {
				"rowselect" : function(sm, i, r) {
					var combiId = r.get("combiId");
					fetchComItemStore.load({
								params : {
									combiId : combiId
								}
							});
				}
			}
		});
var lMultiselect = new Ext.grid.GridPanel({
			border : true,
			tbar : [{
						xtype : "label",
						html : "巡测模板"
					}, "->", {
						text : "管理模板",
						handler : groupManager
					}],
			hideHeaders : true,
			height : 170,
			columnWidth : .5,
			sm : smCombi,
			columns : [{
				dataIndex : "combiName",
				renderer : function(v) {
					var html = '<span ext:qtitle="巡测模板名称" ext:qtip="' + v
							+ '">' + v + '</span>';
					return html;
				}
			}],
			viewConfig : {
				forceFit : true
			},
			stripeRows : true,
			store : fetchComStore
		});

var rMultiselect = new Ext.grid.GridPanel({
			tbar : [{
						text : "数据召测项"
					}],
			border : true,
			hideHeaders : true,
			columnWidth : .5,
			height : 170,
			viewConfig : {
				forceFit : true
			},
			stripeRows : true,
			columns : [{
				dataIndex : "protocolName",
				renderer : function(v) {
					var html = '<span ext:qtitle="数据项名称" ext:qtip="' + v + '">'
							+ v + '</span>';
					return html;
				}
			}],
			store : fetchComItemStore
		});

var multiselectPanel = new Ext.Panel({
			border : false,
			layout : 'column',
			region : "center",
			padding : "10px 10px 10px 10px",
			items : [lMultiselect, {
						border : false,
						height : 170,
						width : 10
					}, rMultiselect]
		});

var buttonPanel = new Ext.Button({
			text : '巡测',
			handler : function(btn) {
				// 有效性验证
				var users = userGridPanel.getSelectionModel().getSelections();
				if (!users || users.length == 0) {
					return !!Ext.Msg.alert("错误", "请选择巡测用户");
				}
				var lms = lMultiselect.getSelectionModel().getSelected();
				if (!lms) {
					return !!Ext.Msg.alert("错误", "请选择一个巡测模板");
				}
				var bfp = Ext.getCmp("batchfetch_point").getValue();
				var arr = [];
				Ext.each(bfp, function(c) {
							arr.push(c.boxLabel);
						});
				Ext.each(morePanel.points, function(a) {
							arr.push(a);
						});
				// 找到所有被选择的的终端地址吗
				var tmnlArr = [];

				var allSelect = Ext.getCmp("bf_allSelect").checked;
				if (allSelect) {
					userStore.eachAll(function(u) {
								tmnlArr.push(u.get("tmnl_asset_no"));
							});
				} else {
					Ext.each(users, function(u) {
								tmnlArr.push(u.get("tmnl_asset_no"));
							});
				}
				Ext.getBody().mask("保存中");
				Ext.Ajax.request({
							url : "baseapp/batchFetch!doTask.action",
							params : {
								combiId : lMultiselect.getSelectionModel()
										.getSelected().get("combiId"),
								queryType : Ext.getCmp("bf_rgp").getValue().inputValue,
								pns : getPnStr(arr),
								sendTime : Ext.getCmp("bf_sendTime").getValue()
										|| undefined,
								startTime : startTime.getValue(),
								endTime : endTime.getValue(),
								tmnlAssetNos : tmnlArr
							},
							callback : function() {
								Ext.getBody().unmask();
							},
							success : function(response) {
								var o = Ext.decode(response.responseText);
								if (o && o.message && o.message.trim() != "") {
									return !!Ext.Msg.alert("错误", o.message);
								}
								// resultMainStore.load();
								return !!Ext.Msg.alert("提示", "巡测成功");
							}
						})

			}
		});

var groupCheckBox = new Ext.Panel({
			border : false,
			layout : 'form',
			labelWidth : 50,
			bodyStyle : 'padding:10px, 0px, 0px, 0px',
			width : 600,
			items : [{
						layout : "table",
						layoutConfig : {
							columns : 2
						},
						border : false,
						items : [{
									xtype : "box",
									html : "计量点号/总加组号",
									style : "font-size:11px;padding:7px 0 0 0"
								}, pointCheckBox]
					}]
		});

var startTime = new Ext.form.DateField({
			format : "Y-m-d",
			fieldLabel : '从',
			width : 90,
			labelSeparator : ''
		});
var endTime = new Ext.form.DateField({
			format : "Y-m-d",
			fieldLabel : '到',
			width : 90,
			labelSeparator : ''
		});
// // //执行时间的日期部分
// var sendDate = new Ext.form.DateField({
// fieldLabel : '从',
// width : 90,
// labelSeparator : ''
//
// });
// var nextSendDate = new Ext.form.DateField({
// fieldLabel : '到',
// width : 90,
// labelSeparator : ''
// });
// // //执行时间的时间部分
// var sendTime = new Ext.form.TimeField({
// emptyText : '选择时间 ...',
// fieldLabel : "",
// labelSeparator : "",
// value : new Date(),
// width : 80,
// format : 'H:i:s'
// });
// var nextSendTime = new Ext.form.TimeField({
// emptyText : '选择时间 ...',
// fieldLabel : "",
// labelSeparator : "",
// value : new Date(),
// width : 80,
// format : 'H:i:s'
// });
//
// var topEastPanel = new Ext.Panel({
// border : false,
// region : "east",
// layout : "table",
// layoutConfig : {
// columns : 3
// },
// items : [batchFetchRadioGroup, {}, {}
//
// ]
// });
/*
 * user list panel
 */
var sm = new Ext.grid.CheckboxSelectionModel();

var userStore = new Ext.ux.LocalStore({
			dataKey : "tmnl_asset_no",
			fields : [{
						name : 'org_name'
					}, {
						name : 'cons_name'
					}, {
						name : 'cons_no'
					}, {
						name : 'terminal_addr'
					}, {
						name : 'protocol_name'
					}, {
						name : 'factory_name'
					}, {
						name : 'factory_code'
					}, {
						name : 'tmnl_asset_no'
					}]
		});

var rowNumUserGrid = new Ext.grid.RowNumberer({
			renderer : function(v, p, record, rowIndex) {
				if (this.rowspan) {
					p.cellAttr = 'rowspan="' + this.rowspan + '"';
				}
				userStore.lastOptions.params = userStore.lastOptions.params
						|| {
							start : 0
						};
				return userStore.lastOptions.params.start + rowIndex + 1;
			}
		});

var cm = new Ext.grid.ColumnModel([rowNumUserGrid, sm, {
	header : '供电单位',
	dataIndex : 'org_name',
	width : 110,
	renderer : function(v) {
		var html = '<span ext:qtitle="供电单位" ext:qtip="' + v + '">' + v
				+ '</span>';
		return html;
	},
	align : 'left'
}, {
	header : '用户编号',
	dataIndex : 'cons_no',
	width : 110,
	align : 'left',
	renderer : function(v) {
		return '<span style="text-align:left">' + v + '</span>';
	}
}, {
	header : '用户名称',
	dataIndex : 'cons_name',
	width : 110,
	renderer : function(v) {
		var html = '<span ext:qtitle="用户名称" ext:qtip="' + v + '">' + v
				+ '</span>';
		return html;
	},
	align : 'left'
}, {
	header : '终端地址',
	width : 110,
	dataIndex : 'terminal_addr',
	align : 'left'
}, {
	header : '规约类型',
	width : 110,
	dataIndex : 'protocol_name',
	align : 'center'
}, {
	header : '制造厂商',
	dataIndex : 'factory_name',
	width : 110,
	align : 'left'
}, {
	header : '原始报文',
	dataIndex : 'message',
	width : 110,
	align : 'center',
	renderer : function(v, m, r) {
		return "<a href='javascript:'onclick='window.origFrameQryShow(\""
				+ r.get('cons_no') + "\",\"" + r.get('cons_name') + "\",\""
				+ r.get('terminal_addr') + "\");" + "'>原始报文</a>";
	}
}]);

var userGridPanel = new Ext.grid.GridPanel({
	id : 'grid',
	store : userStore,
	cm : cm,
	sm : sm,
	height : 540,
	border : false,
	stripeRows : true,
	autoWidth : true,
	autoScroll : true,
	tbar : ["->", {
				xtype : "checkbox",
				boxLabel : "全选",
				id : "bf_allSelect",
				listeners : {
					check : function(c, v) {
						if (v) {
							userStore.setAllSelect(true);
							sm.selectAll();
							lockGrid();
						} else {
							unlockGrid();
							userStore.clearAllSelect();
							sm.clearSelections();
						}
					}
				}
			}, "-", {
				text : '删除选中用户',
				iconCls : 'cancel',
				handler : function() {
					if (Ext.getCmp('bf_allSelect').checked) {
						userStore.clearAll();
						unlockGrid();
					} else {
						var smSelects = sm.getSelections();
						userStore.removeDatas(smSelects);
					}
				}
			}, "-", {
				text : '加入群组',
				iconCls : "plus",
				handler : function() {
					var groupTmnlArray = [];
					if (Ext.getCmp('bf_allSelect').checked) {
						var alldata = userStore.getBaseData();
						userStore.eachAll(function(k, v) {
									groupTmnlArray.push(v["cons_no"] + "`" + k);
								});
					} else {
						var recs = sm.getSelections();
						for (var i = 0; i < recs.length; i++) {
							var tmnl = recs[i].get('cons_no') + '`'
									+ recs[i].get('tmnl_asset_no');
							groupTmnlArray[i] = tmnl;
						}
					}
					if (groupTmnlArray.length == 0) {
						Ext.Msg.alert('提示', '请选择要加入群组的用户');
					} else {
						saveOrUpdateGroupWindowShow(groupTmnlArray);
						if (Ext.getCmp('bf_allSelect').checked) {
							unlockGrid();
						}
					}
				}
			}],
	viewConfig : {
		sortAscText : '升序',
		sortDescText : '降序',
		forceFit : true,
		columnsText : '显示列',
		deferEmptyText : '请等待...',
		emptyText : '没有数据'
	},
	bbar : new Ext.ux.MyToolbar({
				store : userStore
			})
});
userStore.setGrid(userGridPanel);

/** **启用停用*** */
window.setEnable = function(str) {
	var r = resultMainGrid.getSelectionModel().getSelected();

	var params = {
		taskId : r.get("taskId")
	}
	var url = "";
	if (str == "01") {
		url = "baseapp/batchFetch!enableTask.action";
	} else {
		url = "baseapp/batchFetch!disableTask.action"
	}
	var message = str == "01" ? "启用任务" : "禁用任务";
	Ext.Msg.show({
				title : message,
				msg : "是否" + message,
				buttons : Ext.MessageBox.OKCANCEL,
				icon : Ext.MessageBox.WARNING,
				fn : function(msg) {
					if (msg == "cancel") {
						return;
					}
					Ext.Ajax.request({
								url : url,
								params : params,
								success : function(response) {
									var o = Ext.decode(response.responseText);
									if ((o && o.message == "") || !o.message) {
										resultMainStore.reload();
										return !!Ext.Msg.alert("提示", message
														+ "成功");
									}
									return !!Ext.Msg
											.alert("提示", message + "失败");
								}
							});
				}
			});

}

var resultCm = new Ext.grid.ColumnModel([{
	header : "任务时间",
	dataIndex : "taskTime",
	renderer : function(v) {
		v = v.replace(/-/g, "/").replace("T", " ");
		v = new Date(v).format("Y年m月d日 H:i:s") || "";
		var html = '<span ext:qtitle="任务时间" ext:qtip="' + v + '">' + v
				+ '</span>';
		return html;
	}
}, {
	header : "操作人员工号",
	dataIndex : "staffNo"
}, {
	header : "终端地址编号",
	dataIndex : "tmnlAssetNo"
}, {
	header : "采集对象类型",
	dataIndex : "objTypeName"
}, {
	header : "任务测量点列表",
	dataIndex : "dataList",
	renderer : function(v) {
		if (v == "终端") {
			return v;
		}
		return (findPns(v) + "").replace(/[\[\]]/g, "");
	}
}, {
	header : "任务名称",
	dataIndex : "taskName",
	renderer : function(v) {
		var html = '<span ext:qtitle="任务名称" ext:qtip="' + v + '">' + v
				+ '</span>';
		return html;
	}
}, {
	header : "任务状态",
	dataIndex : "statusName",
	renderer : function(v) {
		if (v == "下发成功") {
			return "成功";
		}
		return v;
	}
}, {
	header : "启用/禁用",
	dataIndex : "taskStatus",
	tooltip : "启用停用任务",
	renderer : function(v, m, r) {
		if (v == "04") {
			return "已经成功";
		}
		var tip = v == "01" ? "点击启用" : "点击禁用";
		var html = '<a qtip="' + tip
				+ '" href="#" onclick="window.setEnable(\'' + v
				+ '\');return false;">' + tip + '</a>';
		return html;
	}
}, {
	header : "查看结果",
	renderer : function(v, m, r) {
		var taskId = r.get("taskId");

		return '<a href="#" onclick="window.createGrid(\'' + taskId
				+ '\')">查看结果</a>';
	}
}]);

var resultMainStore = new Ext.data.JsonStore({
			url : "baseapp/batchFetch!findTask.action",
			root : "resultList",
			fields : ["dataList", "taskTypeName", "taskName", "taskId",
					"taskTime", "objTypeName", "statusName", "staffNo",
					"taskStatus", "orgNo", "orgName", "tmnlAssetNo", "objType",
					"taskType"],
			totalProperty : "resultCount"
		});

var resultMainGrid = new Ext.grid.GridPanel({
			border : true,
			region : "center",
			cm : resultCm,
			store : resultMainStore,
			viewConfig : {
				forceFit : true
			},
			bbar : new Ext.ux.MyToolbar({
						store : resultMainStore
					}),
			stripeRows : true,
			listeners : {
				rowdblclick : function(g, ri) {
					var r = g.getStore().getAt(ri);
					var taskId = r.get("taskId");
					createGrid(taskId);
				},
				moveover : function(e) {
					var tip = new Ext.Tip({
								html : "双击查看结果"
							});
					tip.showAt(e.getXY())
				}
			}
		});
var userPanel = new Ext.Panel({
			border : false,
			title : "备选用户",
			layout : "fit",
			items : [userGridPanel]
		});

// 查询面板相关
var taskNameText = new Ext.form.TextField({
			width : 80,
			fieldLabel : "任务名称"
		});

var selectPanel = new Ext.Panel({
			height : 50,
			border : false,
			region : "north",
			padding : "10px 0 0 10px",
			layout : "table",
			defaults : {
				labelWidth : 10,
				labelAlign : "right"
			},
			items : [{
						border : false,
						layout : "form",
						labelAilgn : "right",
						width : 150,
						labelWidth : 60,
						items : [taskNameText]
					}, {
						border : false,
						layout : "form",
						labelWidth : 60,
						labelAilgn : "right",
						width : 200,
						items : [{
									xtype : "datefield",
									id : "bf_findStart",
									format : "Y-m-d",
									fieldLabel : '从',
									value : new Date().add(Date.DAY, -2),
									width : 100
								}]
					}, {
						border : false,
						layout : "form",
						labelWidth : 60,
						labelAilgn : "right",
						width : 200,
						items : [{
									xtype : "datefield",
									format : "Y-m-d",
									value : new Date(),
									id : "bf_findEnd",
									fieldLabel : '到',
									width : 100
								}]
					}, {
						border : false,
						bodyStyle : "padding:0 0 5px 10px",
						width : 150,
						items : [{
							xtype : "button",
							text : "查询",
							handler : function() {
								resultMainStore.baseParams = {
									"finder.startTime" : Ext
											.getCmp("bf_findStart").getValue(),
									"finder.endTime" : Ext.getCmp("bf_findEnd")
											.getValue(),
									"finder.taskName" : taskNameText.getValue()
								};
								resultMainStore.load({
											params : {
												start : 0,
												limit : 50
											}
										});
							}
						}]
					}]
		});
function createBaiRenderer(dic, wrap) {
	return function(v) {
		if (!v || v == "0") {
			return '<div align="right">0</div>';
		}
		v = new Number(v / 0.01).toFixed(dic);
		// v=new Number(v).toFixed(5)+"";
		var rs = [];
		rs.push(v);
		rs.push("%")
		var tag = "";
		tag = wrap.match(/[a-zA-Z]+/)[0];
		if (!tag || tag.trim() == "") {
			return rs.join("");
		}
		rs.splice(0, 0, wrap);
		rs.push("</");
		rs.push(tag);
		rs.push(">");
		return rs.join("");
	}
}

var resultPanel = new Ext.Panel({
			border : false,
			title : "巡测结果",
			layout : "border",
			items : [selectPanel, resultMainGrid]
		});
var statisticsCm = new Ext.grid.ColumnModel([{
	header : "任务批次",
	algin : "center",
	dataIndex : "taskId",
	renderer : function(v, m, r) {
		var html = '<span ext:qtitle="' + this.header + '" ext:qtip="' + v
				+ '">' + v + '</span>';
		return html;
	}
}, {
	header : "巡测总数",
	algin : "center",
	dataIndex : "cnt",
	renderer : function(v, m, r) {
		var html = '<div align="right" ext:qtitle="' + this.header
				+ '" ext:qtip="' + v + '">' + v + '</div>';
		return html;
	}
}, {
	header : "已经成功",
	algin : "center",
	dataIndex : "success",
	renderer : function(v, m, r) {
		var html = '<div align="right" ext:qtitle="' + this.header
				+ '" ext:qtip="' + v + '">' + v + '</div>';
		return html;
	}
}, {
	header : "已经挂起的任务",
	algin : "center",
	dataIndex : "pause",
	renderer : function(v, m, r) {
		var html = '<div align="right" ext:qtitle="' + this.header
				+ '" ext:qtip="' + v + '">' + v + '</div>';
		return html;
	}
}, {
	header : "尚未开始召测",
	algin : "center",
	dataIndex : "waiting",
	renderer : function(v, m, r) {
		var html = '<div align="right" ext:qtitle="' + this.header
				+ '" ext:qtip="' + v + '">' + v + '</div>';
		return html;
	}
}, {
	header : "正在召测中",
	algin : "center",
	dataIndex : "doing",
	renderer : function(v, m, r) {
		var html = '<div align="right" ext:qtitle="' + this.header
				+ '" ext:qtip="' + v + '">' + v + '</div>';
		return html;
	}
}, {
	header : "失败",
	algin : "center",
	dataIndex : "failure",
	renderer : function(v, m, r) {
		var html = '<div align="right" ext:qtitle="' + this.header
				+ '" ext:qtip="' + v + '">' + v + '</div>';
		return html;
	}
}, {
	header : "当前成功率",
	algin : "center",
	dataIndex : "rate",
	renderer : createBaiRenderer(2, '<div align="right">')
}, {
	header : "巡测已持续时间",
	algin : "center",
	dataIndex : "lastTime",
	renderer : function(v, m, r) {
		if (!v) {
			return "该批次巡测尚未开始";
		}
		var s = v;
		var html = parseTime(s);
		var html = '<div   align="right" ext:hide="false" ext:qtitle="' + this.header
				+ '" ext:qtip="' + '<textarea style=font-size:12px;>'+html+'</textarea>' + '">' + html + '</div>';
		return html;
	}
}]);
var statisticsStore = new Ext.data.JsonStore({
			url : "baseapp/batchFetch!findStatistics.action",
			root : "resultList",
			totalProperty : "resultCount",
			fields : ["taskId", "cnt", "lastTime", "success", "pause",
					"waiting", "doing", "failure", "rate"]
		});
var statisticsGrid = new Ext.grid.GridPanel({
			region : "center",
			border : false,
			viewConfig : {
				fitForce : true
			},
			bbar : new Ext.ux.MyToolbar({
						store : statisticsStore
					}),
			store : statisticsStore,
			cm : statisticsCm
		});
	
var statisticsPanel = new Ext.Panel({
			border : false,
			title : "批量统计",
			layout : "fit",
			items : [statisticsGrid]
		});

var batchTabs = new Ext.TabPanel({
			border : true,
			height : 350,
			activeItem : 0,
			region : 'center',
			items : [userPanel, resultPanel, statisticsPanel]
		});
statisticsStore.load({
			params : {
				start : 0,
				limit : 50
			}
		});
/** *组pn* */
/*******************************************************************************
 * @arr pn 的十进制数组 默认的测量点为0 规则略有不同，其中把第1一位看做是零位,在后台要进行处理(substring(1))
 ******************************************************************************/
function getPnStr(arr) {

	if (arr.length == 0) {
		return "1";
	}
	var baseStrArr = (function() {
		var arr = new Array(2101);
		for (var i = 0; i < 2101; i++) {
			arr[i] = "0";
		}
		return arr;
	})()
	var mp = {};
	Ext.each(arr, function(d) {
				mp[d] = true;
			});
	for (var i = 0; i < baseStrArr.length; i++) {
		if (mp[i]) {
			baseStrArr[i] = "1";
		}
	}
	return baseStrArr.join("").replace(/0+$/, "");
}
/*******************************************************************************
 * 对于一个pn的代码，解析出来pn的列表
 ******************************************************************************/
function findPns(str) {
	var arr = [];
	for (var i = 0; i < str.length; i++) {
		if (str[i] == "1") {
			arr.push(i + 1);
		}
	}
	return arr;
}
/** **通过一个cm来生成一个grid***** */
function createGrid(taskId, config) {

	// 基本的headers
	var baseHeaders = [{
				header : "任务号",
				dataIndex : "taskId"
			}, {
				header : "终端地址",
				dataIndex : "tmnlAssetNo"
			}, {
				header : "数据类型",
				dataIndex : "dataType",
				renderer : function(v) {
					return v == "1" && "实时数据" || v == "2" && "历史数据" || v == "3"
							&& "事件数据";
				}
			}, {
				header : "测量点/总加组",
				dataIndex : "mpSn"
			}, {
				header : "巡测状态",
				dataIndex : "errorCode",
				renderer : function(v) {
					if (!v || v.trim() == "") {
						return "成功"
					}
					return "发生错误:错误代码为:" + v;
				}
			}];
	resultMainGrid.getEl().mask("读取中");
	// 通过一个后台的ajax请求来进行结果的显示
	Ext.Ajax.request({
		url : "baseapp/batchFetch!findResult.action",
		params : {
			taskId : taskId
		},
		callback : function() {
			resultMainGrid.getEl().unmask();
		},
		success : function(response) {
			var o = Ext.decode(response.responseText)
			var flat = false;
			var gridConfig = {
				border : false,
				columns : baseHeaders,
				viewConfig : {
					forceFit : false
				},
				autoScroll : true
			};
			Ext.each(o.headers, function(h) {
				h.data = o;
				h.renderer = function(v, m, r) {
					var rs = this.data.codeAndValue[r.get("tmnlAssetNo") + "_"
							+ this.dataIndex + "_" + r.get("mpSn")];
					var reg = /^\d{4}-\d{1,2}-\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}$/;
					if (reg.test(rs)) {
						rs = new Date(rs.replace(/-/g, "/"))
								.format("Y年m月d日 H:i:s");
					}
					var html = '<span ext:qtitle="' + this.header
							+ '" ext:qtip="' + rs + '">' + rs + '</span>';
					return html;
				};
				flat = true;
				h.width = 100;
				h.tooltip = h.header;
				baseHeaders.push(h);
			})
			gridConfig.viewConfig = {
				forceFit : !flat
			};

			var fields = ["protocolName", "dataType", "dataItemNo", "mpSn",
					"tmnlAssetNo", "errorCode", "taskId", "dataId"];
			// 解决在fields小于baseHeaders的长度时候的问题
			// var len = baseHeaders.length - fields.length;
			// for (var i = 0; i <= len; i++) {
			// fields.push("data_tem");
			// }
			// 通过后台数据生成结果
			var store = new Ext.ux.LocalStore({
						dataKey : "dataId",
						fields : fields
					});
			gridConfig.store = store;
			gridConfig.bbar = new Ext.ux.MyToolbar({
						store : store
					})
			Ext.applyIf(gridConfig, config && config.gridConfig);
			var grid = new Ext.grid.GridPanel(gridConfig);
			// store.setGrid(grid);
			o.resultList[0] && store.addDatas(o.resultList);
			var win = new Ext.Window({
						title : '任务号' + taskId + '的巡测结果',
						layout : "fit",
						width : 800,
						height : 400,
						buttonAlign : 'center',
						modal : true,
						items : [grid],
						buttons : [{
									text : "关闭",
									handler : function() {
										this.ownerCt.ownerCt.close();
									}
								}]
					});
			Ext.apply(grid, rendererConfig);
			win.show();
		}
	});

}
// 事件级别选择
var eventLevel = new Ext.form.ComboBox({
			allowBlank : false,
			valueField : "value",
			fieldLabel : "事件级别",
			displayField : "text",
			triggerAction : "all",
			mode : "local",
			hiddenName : "eventLevel",
			width : 150,
			store : new Ext.data.SimpleStore({
						fields : ["value", "text"],
						data : [["01", "重要事件"], ["02", "一般事件"]]
					})
		})
var msgAndEventLevel = new Ext.Panel({
			border : false,
			layout : "form",
			bodyStyle : "padding:10px 0px 0px 0px",
			labelWidth : 60,
			labelAlign : "right",
			items : [eventLevel]
		});
// 开始时间，结束时间
var datePanel = new Ext.Panel({
			border : false,
			layout : "table",
			autoWidth : true,
			bodyStyle : "padding:10px 0px 0px 0px",
			layoutConfig : {
				columns : 2
			},
			items : [{
						border : false,
						layout : "form",
						labelWidth : 10,
						labelAlign : "right",
						items : [startTime]
					}, {
						border : false,
						labelAlign : "right",
						layout : "form",
						labelWidth : 20,
						items : [endTime]
					}
			// startTime,endTime
			]
		});
// datePanel.hide();
// 解释性文字
var msgAndPoints = new Ext.Panel({
			border : false,
			layout : "form",
			bodyStyle : "padding:10px 0px 0px 0px",
			items : [{
						xtype : "box",
						style : "font-size:11px",
						html : "测量点号/总加组号"
					}, pointCheckBox]
		});
// 带
// 客户的定制部分
var customPanel = new Ext.Panel({
			border : false,
			layout : "table",
			items : [{
						border : "false",
						layout : "form",
						border : false,
						labelWidth : 50,
						labelAlign : "right",
						items : [{
									xtype : "datetimefield",
									id : "bf_sendTime",
									fieldLabel : "执行时间",
									value : new Date().add(Date.MINUTE, 30)
								}]
					}]
		});

// 右上部的面板
var rightTop = new Ext.Panel({
			border : false,
			height : 180,
			region : "east",
			bodyStyle : "padding:30px 0 10px 0 ",
			width : 320,
			layout : "table",
			layoutConfig : {
				columns : 1
			},
			items : [batchFetchRadioGroup, datePanel, msgAndPoints,
					msgAndEventLevel, customPanel]

		});

// 上部大的面板
var topPanel = new Ext.Panel({
			height : 230,
			region : "north",
			layout : "border",
			buttonAlign : "center",
			buttons : [buttonPanel],
			items : [multiselectPanel, rightTop],
			border : true
		});

// 生成一个查询条件的window
function createFindWin() {
	var taskNameText = new Ext.form.TextField({
				fieldLabel : "任务名称"
			});
	var panel = new Ext.Panel({
				border : false,
				padding : "30px 0 0 10px",
				layout : "column",
				defaults : {
					labelWidth : 10,
					labelAlign : "right"
				},
				items : [{
							border : false,
							layout : "form",
							labelAilgn : "right",
							labelWidth : 40,
							items : [taskNameText]
						}, {
							border : false,
							layout : "form",
							columnWidth : .33,
							items : [{
										xtype : "datefield",
										id : "bf_findStart",
										format : "Y-m-d",
										fieldLabel : '从',
										value : new Date().add(Date.DAY, -2),
										width : 120
									}]
						}, {
							border : false,
							layout : "form",
							columnWidth : .33,
							items : [{
										xtype : "datefield",
										format : "Y-m-d",
										value : new Date(),
										id : "bf_findEnd",
										fieldLabel : '到',
										width : 120
									}]
						}]
			});

	var win = new Ext.Window({
				layout : "fit",
				title : "查询巡测任务",
				items : [panel],
				width : 320,
				height : 150,
				modal : "true",
				buttons : [{
					text : "查询",
					handler : function() {
						resultMainStore.baseParams = {
							"finder.startTime" : Ext.getCmp("bf_findStart")
									.getValue(),
							"finder.endTime" : Ext.getCmp("bf_findEnd")
									.getValue()
						};
						resultMainStore.load();
						this.ownerCt.ownerCt.close();
					}
				}, {
					text : "清空",
					tooltip : "清空查找所有",
					handler : function() {
						Ext.getCmp("bf_findStart").setValue();
						Ext.getCmp("bf_findEnd").setValue();
					}
				}, {
					text : "关闭",
					handler : function() {
						this.ownerCt.ownerCt.close();
					}
				}]
			});
	win.show();
	return win;
}

/** **************************************************** */
/* 工具 */
/** *************************************************** */
/* 在类似{key1=value1,key1=value1,key4=value3,key2=value2} */
/* 字符串中取数据** */
var ParseUtils = {
	get : function(input, key) {
		var p = new RegExp("[\\{\\,\\s]" + key + "=([\\w\u2E80-\u9FFF\\-]+)",
				"g");
		var r;
		var arr = [];
		while ((r = p.exec(input))) {
			arr.push(RegExp.$1);
		}
		return arr;
	},
	getFirst : function(input, key) {
		var p = new RegExp("[\\{\\,\\s]" + key + "=([\\w\u2E80-\u9FFF\\-]+)",
				"g");
		p.exec(input);
		return RegExp.$1;
	},
	// 增加一个值如果原来没有
	add : function(input, key, value) {

		if (!this.exists(input, key)) {
			return addDirect(input, key, value);
		}

	},
	exists : function(input, key) {
		var p = new RegExp("[\\{\\,\\s]" + key + "=([\\w\u2E80-\u9FFF\\-]+)",
				"g");
		return !!p.exec(input);
	},
	addDirect : function(input, key, value) {
		return input.replace(/}/g, "," + key + "=" + value + "}");
	},

	update : function(input, key, value) {
		var p = new RegExp("[\\{\\,\\s]" + key + "=([\\w\u2E80-\u9FFF\\-]+)",
				"g");
		p.exec(input);
		return input.replace(key + "=" + RegExp.$1, key + "=" + value);
	}
};

/**
 * *************************************** 组合管理窗口
 * ******************************************
 */
function groupManager(title) {
	var queryTypeSelect = Ext.getCmp("bf_rgp").getValue().inputValue;
	if (queryTypeSelect == 3) {
		return;
	}
	/** ************** */
	/* 透明规约编码树 */
	/** ************** */
	var treeRootNode = new Ext.tree.AsyncTreeNode({
				id : 'root',
				text : 'root'
			});
	var treeLoader = new Ext.tree.TreeLoader({
				dataUrl : 'baseapp/dataFetch!queryTreeNode.action',
				baseParams : {
					"queryType" : queryTypeSelect
				}
			});
	var tree = new Ext.tree.TreePanel({
				title : '规约编码',
				border : true,
				columnWidth : .45,
				height : 390,
				autoScroll : true,
				animate : false,
				frame : false,
				rootVisible : false,
				root : treeRootNode,
				loader : treeLoader,
				listeners : {
					'dblclick' : addProtocol
				}
			});
	function addProtocol(eNode, e) {
		var r = gridProtocolGroupWindow.getSelectionModel().getSelected();
		if (!r) {
			return !!Ext.Msg.alert("请先选择一个组合项");
		}
		var node = tree.getSelectionModel().getSelectedNode();
		var parentNode = tree.getSelectionModel().getSelectedNode().parentNode;
		if (!node.isLeaf() && node.id == eNode.id) {
			if (node.isExpanded()) {
				node.collapse();
			} else {
				node.expand();
			}
		}
		if (parentNode.id == 'root') {
			Ext.MessageBox.alert('出错', '不允许添加数据项类型！');
			return;
		}
		var nodeId = node.id;
		var nodeText = node.text;
		var protocolObj = new Object();
		protocolObj.protocolName = nodeText;
		protocolObj.protocolCode = nodeId;
		var protocolRecord = new Ext.data.Record(protocolObj);
		for (var i = 0; i < store.getCount(); i++) {
			if (store.getAt(i).data.protocolCode == nodeId) {
				Ext.MessageBox.alert('出错', '该数据项已存在！');
				return;
			}
			while (parentNode.id != 'root') {
				if (store.getAt(i).data.protocolCode == parentNode.id) {
					Ext.MessageBox.alert('出错', '该数据项父项已存在，不允许添加！');
					return;
				}
				parentNode = parentNode.parentNode;
			}
			parentNode = tree.getSelectionModel().getSelectedNode().parentNode;
			var childNodes = node.childNodes;
			for (var j = 0; j < childNodes.length; j++) {
				if (store.getAt(i).data.protocolCode == childNodes[j].id) {
					Ext.MessageBox.alert('出错', '已存在该数据项子项，不允许添加！');
					return;
				}
				if (childNodes[j].hasChildNodes()) {
					var tmpNodes = childNodes[j].childNodes;
					for (var x = 0; x < tmpNodes.length; x++) {
						if (store.getAt(i).data.protocolCode == tmpNodes[x].id) {
							Ext.MessageBox.alert('出错', '已存在该数据项子项，不允许添加！');
							return;
						}
					}
				}
			}
		}
		addComItem();
		store.add(protocolRecord);
	}

	/** ******************* */
	/* 透明规约编码明细表格 */
	/** ******************* */
	var sm = new Ext.grid.CheckboxSelectionModel({
				singleSelect : false
			});
	var cm = new Ext.grid.ColumnModel([sm, {
				header : '数据项名称',
				dataIndex : 'protocolName',
				align : 'left',
				width : 270,
				menuDisabled : true
			}, {
				header : '编码',
				dataIndex : 'protocolCode',
				align : 'left',
				width : 50,
				menuDisabled : true
			}]);
	var store = new Ext.data.ArrayStore({
				fields : [{
							name : 'protocolName'
						}, {
							name : 'protocolCode'
						}, {
							name : "combiId"
						}, {
							name : "dataGroup"
						}, {
							name : "isShare"
						}]
			});
	var gridPanel = new Ext.grid.GridPanel({
				store : store,
				border : false,
				id : "bataFetch_right",
				cm : cm,
				sm : sm,
				stripeRows : true,
				title : '召测数据项',
				height : 390,
				viewConfig : {
					forceFit : true
				}
			});
	// gridPanel.body.setOverflow("scroll");
	var rightPanel = new Ext.Panel({
				columnWidth : .45,
				autoScroll : true,
				items : [gridPanel]
			})

	/** ************ */
	/* 添加删除按钮 */
	/** ************ */
	var buttonPanel = new Ext.Panel({
				columnWidth : .1,
				border : false,
				layout : 'table',
				layoutConfig : {
					columns : 1
				},
				bodyStyle : 'padding: 160px 0px 0px 0px',
				height : 400,
				items : [{
							layout : 'form',
							border : false,
							autoWidth : true,
							bodyStyle : 'padding: 0px 10px 10px 10px',
							items : [{
										xtype : 'button',
										text : '增加',
										width : 50,
										handler : addProtocol
									}]
						}, {
							layout : 'form',
							border : false,
							autoWidth : true,
							bodyStyle : 'padding: 0px 10px 10px 10px',
							items : [{
										xtype : 'button',
										text : '删除',
										width : 50,
										handler : function() {
											var selectProtocol = sm
													.getSelections();
											delComItem();
											store.remove(selectProtocol);
										}
									}]
						}]
			})

	/** ******** */
	/* 中心面板 */
	/** ******** */
	var centerPanel = new Ext.Panel({
				layout : 'form',
				region : 'center',
				border : false,
				bodyStyle : 'padding:0px 10px 0px 0px',
				items : [{
							layout : 'column',
							border : false,
							items : [tree, buttonPanel, rightPanel]
						}]
			})

	/** ******** */
	/* 组合名称 */
	/** ******** */
	var groupNameText = new Ext.Panel({
				border : false,
				layout : 'form',
				labelAlign : 'right',
				labelWidth : 80,
				autoScroll : false,
				width : 330,
				hidden : true,
				// labelWidth : 50,
				items : [{
							xtype : 'textfield',
							name : 'groupName',
							id : "bataFetch_groupName",
							fieldLabel : '组合名称',
							allowBlank : false,
							blankText : '请输入组合名称',
							anchor : '90%',
							// labelWidth : 180,
							// width:250,
							regex : /^[\w\u2E80-\u9FFF]+$/,
							regexText : "格式错误，不能包含{,},=空格_-等符号",
							labelSeparator : '',
							listeners : {
								"change" : function(src, newValue, oldValue) {
									editCom(src, newValue, oldValue);
								}
							}
						}]
			})

	/** ******** */
	/* 是否共享 */
	/** ******** */
	var shareCheckbox = new Ext.Panel({
				border : false,
				layout : 'form',
				hideLabels : true,
				autoWidth : true,
				items : [{
							xtype : 'checkbox',
							name : 'shareFlag',
							id : "bataFetch_share",
							boxLabel : '是否共享',
							hidden : true,
							listeners : {
								"change" : function(src) {
									editCom(src);
								}
							}
						}]
			})

	/** ******** */
	/* 有效天数 */
	/** ******** */
	var lifeDayText = new Ext.Panel({
				border : false,
				layout : 'form',
				labelAlign : 'right',
				labelWidth : 80,
				autoScroll : false,
				hidden : true,
				width : 330,
				items : [{
							xtype : 'textfield',
							name : 'lifeDay',
							fieldLabel : '有效天数',
							id : "bataFetch_validays",
							allowBlank : false,
							anchor : '90%',

							blankText : '请输入有效天数',
							regex : /^\d+$/,
							maskRe : /^\d+$/,
							regexText : "请输入数字",
							labelSeparator : '',
							listeners : {
								"change" : function(src, newValue, oldValue) {
									editCom(src, newValue, oldValue);
								}
							}
						}]
			});

	/** ******** */
	/* 创建日期 */
	/** ******** */
	var createDatefield = new Ext.Panel({
				border : false,
				layout : 'form',
				labelAlign : 'right',
				labelWidth : 50,
				autoWidth : true,
				readOnly : true,
				items : [{
							xtype : 'textfield',
							readOnly : true,
							name : 'createDate',
							id : "bataFetch_createDate",
							anchor : '100%',
							hidden : true,
							hideLabel : true,
							fieldLabel : '创建日期',
							width : 90,
							labelSeparator : ''
						}]
			});

	/** ******** */
	/* 上部面板 */
	/** ******** */
	var northPanel = new Ext.Panel({
				layout : 'table',
				height : 100,
				border : false,
				region : 'north',
				layoutConfig : {
					columns : 2
				},
				height : 80,
				bodyStyle : 'padding:15px 0px 20px 0px',
				defaults : {

					listeners : {
						"change" : function() {
							editCom();
						}
					}
				},
				items : [groupNameText, shareCheckbox, lifeDayText,
						createDatefield]
			});

	/** ******** */
	/* 左部面板 */
	/** ******** */
	var smProtocolGroupWindow = new Ext.grid.RowSelectionModel({
				singleSelect : true,
				listeners : {
					"beforerowselect" : function() {
						Ext.getCmp("bataFetch_createDate").focus();
					},
					'rowselect' : function(sm, rowIndex, r) {
						groupNameText.show();
						lifeDayText.show();
						// Ext.getCmp("bataFetch_groupName").blur();
						loadValues(r);
						for (var key in warehouse) {
							var name = ParseUtils.getFirst(key, "newName");
							var staffNo = ParseUtils.getFirst(key, "staffNo");
							var self = ParseUtils.getFirst(key, "self");
							if (name == r.get("newName")
									&& (staffNo == r.get("staffNo") || self == "yes")) {
								var data = warehouse[key];
								store.removeAll();
								for (var i = 0; i < data.length; i++) {
									var oo = data[i];
									if (oo.status == "itemDel") {
										continue;
									}
									var r = new Ext.data.Record({
												"protocolName" : oo.protocolName,
												"protocolCode" : oo.clearProtNo,
												"combiId" : oo.combiId
											});
									store.add(r);
								}
							}
						}
					}
				}
			});
	/** ********************************** */
	/** *选择之后填充表单的值************** */
	/** ********************************* */
	function loadValues(r) {
		// bataFetch_groupName bataFetch_share bataFetch_validays
		// bataFetch_createDate
		Ext.getCmp("bataFetch_groupName").setValue(r.get("newName"));
		Ext.getCmp("bataFetch_share").setValue(r.get("isShare"));
		Ext.getCmp("bataFetch_validays").setValue(r.get("validDays"));
		Ext.getCmp("bataFetch_createDate").setValue(r.get("createDate"));
		var staffNo = r.get("staffNo");
		// 如果不是自己的
		if (r.get("self") == "no") {
			Ext.getCmp("bataFetch_groupName").disable();
			Ext.getCmp("bataFetch_share").disable();
			Ext.getCmp("bataFetch_validays").disable();
			Ext.getCmp("bataFetch_createDate").disable();
			Ext.getCmp("bataFetch_right").disable();

		} else {
			Ext.getCmp("bataFetch_right").enable();
			Ext.getCmp("bataFetch_groupName").enable();
			Ext.getCmp("bataFetch_share").enable();
			Ext.getCmp("bataFetch_validays").enable();
			Ext.getCmp("bataFetch_createDate").enable();
		}
	}

	/** ***************** */
	/* 管理所涉及到的一些处理方法 */
	// warehouse storeProtocolGroupWindow store gridProtocolGroupWindow
	// gridPanel
	/** ***************** */

	/** ******验证是不是有重名的项目********* */
	function isEcho(name) {
		var key = findKeyByName(name);
		if (key) {
			return true;
		}
		return false;
	}

	// 将一个对象转化为符合提交的数据格式
	function convertCommit(o) {
		var str = ["{"];
		for (var key in o) {

			if (typeof o[key] != "function") {
				// if(o[key].indexOf(" ")>0){
				// continue;
				// }
				if (key == "protocolName") {
					continue;
				}
				str.push(key);
				str.push("=");
				str.push(o[key]);
				str.push(",");
			}
		}
		str.pop();
		str.push("}");
		return str.join("");
	}
	// alert(convertCommit({a:"aa",b:"虎",c:function(){},d:"靠"}));
	/** **编辑组合项*** */
	function editCom(src, newValue, oldValue) {
		var r = gridProtocolGroupWindow.getSelectionModel().getSelected();
		if (!r) {
			return !!Ext.Msg.alert("错误", "请选择编辑项");
		}
		if (!src.validate()) {
			src.setValue(oldValue);
			return Ext.Msg.alert("错误的输入格式");
		}
		// if(r.get("status")=="combiAdd"){
		// r.set("newName", Ext.getCmp("bataFetch_groupName").getValue());
		// r.set("combiName", Ext.getCmp("bataFetch_groupName").getValue());
		// r.set("isShare", Ext.getCmp("bataFetch_share").getValue());
		// r.set("validDays", Ext.getCmp("bataFetch_validays").getValue());
		// return;
		// }
		// r.set("createDate",
		// Ext.getCmp("bataFetch_createDate").getRawValue());
		var newName = Ext.getCmp("bataFetch_groupName").getValue();
		var key = findKeyByName(r.get("newName"));
		if (!key) {
			return !!Ext.Msg.alert("错误", "组合" + r.get("combiName") + "可能已经被删除");
		}
		var status = ParseUtils.getFirst(key, "status");
		if (src == Ext.getCmp("bataFetch_groupName") && isEcho(newName)) {
			src.setValue(oldValue);
			return !!Ext.Msg.alert("警告", "存在重名的组合名称");
		}
		r.set("newName", newName);
		r.set("isShare", Ext.getCmp("bataFetch_share").getValue());
		r.set("validDays", Ext.getCmp("bataFetch_validays").getValue());
		var keyNew = ParseUtils.update(key, "newName", Ext
						.getCmp("bataFetch_groupName").getValue());
		var keyNew = ParseUtils.update(keyNew, "isShare", Ext
						.getCmp("bataFetch_share").getValue());
		var keyNew = ParseUtils.update(keyNew, "validDays", Ext
						.getCmp("bataFetch_validays").getValue());
		var keyNew = ParseUtils.update(keyNew, "status", "combiEdit");
		warehouse[keyNew] = warehouse[key];
		warehouse[key] = null;
		delete warehouse[key];
	}
	/** ******通过名称在仓库里面得到值************** */
	function findKeyByName(name) {
		for (var key in warehouse) {
			var self = ParseUtils.get(key, "self");
			if (self == "no") {
				continue;
			}
			var cname = ParseUtils.get(key, "newName");
			if (cname == name) {
				return key;
			}
		}
		return null;
	}
	/** **增加组合的一个小项*** */
	function addComItem() {
		var node = tree.getSelectionModel().getSelectedNode()
		var clearNo = node.id;
		var r = gridProtocolGroupWindow.getSelectionModel().getSelected();
		if (!r) {
			return;
		}
		var arr = findByComName(r.get("newName"));
		if (arr == null) {
			return !!Ext.Msg.alert("错误", "选择的项可能已经被删除");
		}
		arr.push({
					clearProtNo : clearNo,
					status : "itemAdd",
					protocolName : node.text
				});
	}
	/** **删除组合项中的一个或者多个小项*** */
	function delComItem() {
		var node = Ext.getCmp("bataFetch_right").getSelectionModel()
				.getSelections();
		if (!node) {
			return !!Ext.Msg.alert("错误", "选择的项可能已经被删除");
		}
		var r = gridProtocolGroupWindow.getSelectionModel().getSelected();
		var arr = findByComName(r.get("newName"));
		if (arr == null) {
			return !!Ext.Msg.alert("错误", "选择的项可能已经被删除");
		}

		// storeProtocolGroupWindow
		for (var i = 0; i < arr.length; i++) {
			var o = arr[i];
			for (var j = 0; j < node.length; j++) {
				var n = node[j];
				if (o.clearProtNo == n.get("protocolCode")) {
					if (o.status == "itemAdd") {
						arr.remove(o);
						i--;
					} else {
						o.status = "itemDel";
					}
				}
			}
		}
	}
	/** **删除组合项*** */
	function delCom() {
		var r = gridProtocolGroupWindow.getSelectionModel().getSelected();

		var key = findKeyByName(r.get("newName"));
		var newKey = ParseUtils.update(key, "status", "combiDel");
		warehouse[newKey] = [];
		delete warehouse[key];
		storeProtocolGroupWindow.remove(r)
		gridProtocolGroupWindow.getSelectionModel().selectLastRow();
	}
	/** *****通过组合名称来查找输入自己的小项列表,如果没有找到返回空******* */
	function findByComName(name) {
		for (var key in warehouse) {
			var cname = ParseUtils.get(key, "newName");
			var self = ParseUtils.get(key, "self");
			if (self == "no") {
				continue;
			}
			if (cname == name) {
				return warehouse[key];
			}
		}
		return null;
	}

	/** *******新增一个召测组合项********* */
	function addNewCom() {
		var r = new Ext.data.Record({
					"combiName" : "",
					"staffNo" : "",
					"isShare" : 0,
					"validDays" : 900,
					"self" : "yes",
					"status" : "combiAdd",
					"createDate" : new Date().format("Y-m-d"),
					"newName" : ""
				});
		storeProtocolGroupWindow.add(r);
		// 生成一个key,key的值是个数组
		// {validDays=1234, status=combiAdd, self=yes, combiName=a,
		// newName=a,
		// isShare=1}
		var name = getValidName();
		r.set("newName", name);
		r.set("combiName", name);
		var key = "{combiName=" + name + ",newName=" + name
				+ ",self=yes,status=combiAdd,validDays=900,isShare=0,"
				+ "createDate=" + new Date().format("y-m-d") + "}";
		warehouse[key] = [];
		gridProtocolGroupWindow.getSelectionModel().selectLastRow();

	}
	/** *******得到一个不重复的组合的名称************ */
	function getValidName() {
		var name = 'new1';
		var i = findKeyByName(name);
		while (i) {
			name = name + "1";
			i = findKeyByName(name);
		}
		return name;
	}
	/** ************************************* */
	var cmProtocolGroupWindow = new Ext.grid.ColumnModel([{
				dataIndex : 'newName',
				width : 210,
				align : 'left',
				menuDisabled : true
			}]);
	// Ext.data.ArrayStore;
	var storeProtocolGroupWindow = new Ext.data.ArrayStore({
		fields : [{
					name : "combiName"
				}, {
					name : "staffNo"
				}, {
					name : "validDays"
				}, {
					name : "isShare"
				}, {
					name : "newName"
				}, {
					name : "createDate"
				}, {
					name : "self"
				}]
			// autoLoad : true,
			// proxy : new Ext.data.HttpProxy( {
			// url : 'baseapp/dataFetch!queryProtocolGroup.action'
			// }),
			// reader : new Ext.data.JsonReader( {
			// root : 'protocolGroupDTOList'
			// }, [ {
			// name : 'combiName'
			// }, {
			// name : 'staffNo'
			// }, {
			// name : 'createDate'
			// }, {
			// name : 'validDays'
			// }, {
			// name : 'isShare'
			// }, {
			// name : 'combiMap'
			// } ])

		});
	var gridProtocolGroupWindow = new Ext.grid.GridPanel({
				border : false,
				hideHeaders : true,
				stripeRows : true,
				store : storeProtocolGroupWindow,
				cm : cmProtocolGroupWindow,
				sm : smProtocolGroupWindow,
				// width : 190,
				autoWidth : true,
				height : 489,
				viewConfig : {
					forceFit : true
				}
			});
	var panelProtocolGroupWindow = new Ext.Panel({
				border : true,
				// width : 190,
				autoWidth : true,
				height : 460,
				items : [gridProtocolGroupWindow],
				tbar : [{
							xtype : 'label',
							text : '召测组合',
							style : 'font-weight:bold;color:#15428b'
						}]
			});
	var westPanel = {
		border : false,
		region : 'west',
		width : 210,
		bodyStyle : 'padding:10px 10px 0px 10px',
		items : [panelProtocolGroupWindow]
	}

	/** ******** */
	/* 表单面板 */
	/** ******** */
	var protocolFormPanel = new Ext.form.FormPanel({
		layout : 'border',
		border : false,
		region : 'center',
		items : [westPanel,
				// southPanel,
				{
			layout : 'border',
			border : false,
			region : 'center',
			buttonAlign : 'center',
			footerCfg : {
				// cls : "whiteback",
				id : "df_footer_id",
				style : "background-color:white"
			},
			items : [northPanel, centerPanel],
			buttons : [{
						xtype : 'button',
						text : "增加",
						handler : function() {
							addNewCom();
						}
					}, {
						xtype : 'button',
						text : "删除",
						handler : function() {
							delCom();
						}
					}, {
						xtype : 'button',
						text : '保存',
						width : 80,
						handler : function() {
							// 参数
							var params = [];
							// 处理数据仓库，对数据仓库进行处理，组装成字符串到后台处理
							for (var key in warehouse) {
								var oo = warehouse[key];

								var combiName = ParseUtils.getFirst(key,
										"combiName");
								var self = ParseUtils.getFirst(key, "self");
								var status = ParseUtils.getFirst(key, "status");
								var flat = false;
								if (oo) {
									for (var i = 0; i < oo.length; i++) {
										if (oo[i].status == "db"
												|| oo[i].status == "itemAdd") {
											flat = true;
											break;
										}
									}
								}
								if (status != "combiDel" && !flat) {

									return !!Ext.Msg
											.alert(
													"错误",
													"组合:"
															+ ParseUtils
																	.getFirst(
																			key,
																			"newName")
															+ "未添加项");
								}
								if (status == "combiEdit"
										|| status == "combiDel") {
									params.push(key);
								}

								var dataItems = warehouse[key];
								for (var i = 0; i < dataItems.length; i++) {
									var item = dataItems[i];
									if (item.status == "db") {
										continue;
									}
									var p = convertCommit(item);
									var n = ParseUtils.getFirst(key, "newName");
									p = ParseUtils.addDirect(p, "combiName", n);
									params.push(p);
								}
							}
							// if (protocolFormPanel.form.isValid()) {
							protocolFormPanel.form.submit({
										url : 'baseapp/dataFetch!doEdit.action',
										method : 'post',
										params : {
											// protocolArray : protocolArray
											cmds : params
										},
										clientValidation : false,
										success : function() {
											fetchComStore.load({
														params : {
															"type" : queryTypeSelect
														}
													});
										},
										failure : function(response) {
											return;
										},
										waitTitle : '请稍后',
										waitMsg : '正在保存透明规约组合...'
									})
							groupWindow.close();
						}
					}, {
						xtype : 'button',
						text : '关闭',
						width : 80,
						handler : function() {
							groupWindow.close();
						}
					}]
		}]
	})

	/** ****************** */
	/** ***************** */
	/* 组合管理窗口初始化 */
	/** ***************** */
	var groupWindow = new Ext.Window({
				title : title || "组合管理",
				width : 900,
				height : 550,
				layout : 'border',
				modal : true,
				resizable : false,
				items : [protocolFormPanel]
			});
	/** ********************** */
	/** *******删除一个召测组合**************** */
	/** ********************** */
	/** ** 一个存放数据的的仓库** */
	/** ********************** */
	var warehouse = {};
	Ext.Ajax.request({
		url : "baseapp/dataFetch!findStructure.action",
		success : function(resp) {
			storeProtocolGroupWindow.removeAll();
			var queryType = queryTypeSelect;
			// Ext.getCmp("queryType_group").getValue().inputValue;
			var o = Ext.decode(resp.responseText);
			for (var key in o.combiMap) {
				var dataGroup = ParseUtils.getFirst(key, "dataGroup");
				var str = Ext.encode(o.combiMap[key]);
				var self = ParseUtils.getFirst(key, "self");
				if (self == "no") {
					continue;
				}
				if (queryType == 1) {
					if (str.indexOf('"dataGroup":2') > 0) {
						continue;
					}

				} else if (queryType == 2) {
					if (str.indexOf('"dataGroup":1') > 0) {
						continue;
					}
				} else {

				}
				// alert(ParseUtils.getFirst("{staffNo=test,combiName=1好}","combiName"));
				var r = new Ext.data.Record({
							"combiName" : ParseUtils.getFirst(key, "combiName"),
							"staffNo" : ParseUtils.getFirst(key, "staffNo"),
							"isShare" : ParseUtils.getFirst(key, "isShare"),
							"validDays" : ParseUtils.getFirst(key, "validDays"),
							"self" : ParseUtils.getFirst(key, "self"),
							"createDate" : ParseUtils.getFirst(key,
									"createDate"),
							"newName" : ParseUtils.getFirst(key, "newName")
						});
				storeProtocolGroupWindow.add(r);
			};
			warehouse = o.combiMap;
			// var queryType = queryTypeSelect;
			// Ext.getCmp("queryType_group").getValue().inputValue;
			if (queryType == 1) {
				groupWindow.setTitle("管理一类数据巡测模板");
			} else if (queryType = 2) {
				groupWindow.setTitle("管理二类数据巡测模板");
			}
			groupWindow.show();
		}
	});
	// storeProtocolGroupWindow 召测组合的store combiName

}

Ext.onReady(function() {
	new LeftTreeListener({
		modelName : '批量巡测',
		processClick : function(p, node, e) {
			var obj = node.attributes.attributes;
			var type = node.attributes.type;
			Ext.Ajax.request({
				url : "baseapp/dataFetch!dealTree.action",
				params : {
					start : 0,
					limit : 400,
					"node" : type == "usr"
							? ("tmnl_" + obj.tmnlAssetNo + "_" + obj.tmnlAssetNo)
							: node.id
				},
				success : function(response) {
					var o = Ext.decode(response.responseText);
					userStore.addDatas(o.resultMap);
				}
			});
		},
		processUserGridSelect : function(sm, row, r) {
			var tmnl = r.get("tmnlAssetNo");
			Ext.Ajax.request({
						url : "baseapp/dataFetch!dealTree.action",
						params : {
							start : 0,
							limit : 50,
							"node" : "tmnl_" + tmnl + "_01"
						},
						success : function(response) {
							var o = Ext.decode(response.responseText);
							userStore.addDatas(o.resultMap);
						}
					});
		}
	});

	fetchComStore.load({
				params : {
					"type" : "1"
				}
			});

	var bigPanel = new Ext.Panel({
				layout : "border",
				border : false,
				items : [{
							region : "center",
							border : false,
							layout : "border",
							items : [topPanel, batchTabs]
						}]
			});
	renderModel(bigPanel, '批量巡测');
	datePanel.setVisible(false);
	msgAndEventLevel.setVisible(false);
	Ext.apply(userGridPanel, rendererConfig);
	Ext.apply(resultMainGrid, rendererConfig);
	Ext.apply(statisticsGrid,rendererConfig);	
	Ext.query("#" + lMultiselect.getId() + " div[class$=scroller]")[0].style.overflowY = "scroll";
	Ext.query("#" + rMultiselect.getId() + " div[class$=scroller]")[0].style.overflowY = "scroll";
});