/**
 * @description 使导出excel支持renderer和在renderer方法内容支持this
 * @author huangxuan
 * @type 
 */
var rendererConfig = {
		createWorksheet : function(includeHidden, notIncludeData) {
			// Calculate cell data types and extra class names which affect
			// formatting
			var cellType = [];
			var cellTypeClass = [];
			var cm = this.getColumnModel();
			var totalWidthInPixels = 0;
			var colXml = '';
			var headerXml = '';
			var visibleColumnCountReduction = 0;
			var colCount = cm.getColumnCount();
			for (var i = 0; i < colCount; i++) {
				if ((cm.getDataIndex(i) != '')
						&& (includeHidden || !cm.isHidden(i))) {
					var w = cm.getColumnWidth(i)
					totalWidthInPixels += w;
					if (cm.getColumnHeader(i) === "") {
						cellType.push("None");
						cellTypeClass.push("");
						++visibleColumnCountReduction;
					} else {
						colXml += '<ss:Column ss:AutoFitWidth="1" ss:Width="'
								+ w + '" />';
						headerXml += '<ss:Cell ss:StyleID="headercell">'
								+ '<ss:Data ss:Type="String">'
								+ cm.getColumnHeader(i)
								+ '</ss:Data>'
								+ '<ss:NamedCell ss:Name="Print_Titles" /></ss:Cell>';
						var fld = this.store.recordType.prototype.fields.get(cm
								.getDataIndex(i));
						fld = fld || {};
						switch (fld.type) {
							case "int" :
								cellType.push("Number");
								cellTypeClass.push("int");
								break;
							case "float" :
								cellType.push("Number");
								cellTypeClass.push("float");
								break;
							case "bool" :
							case "boolean" :
								cellType.push("String");
								cellTypeClass.push("");
								break;
							case "date" :
								cellType.push("DateTime");
								cellTypeClass.push("date");
								break;
							default :
								cellType.push("String");
								cellTypeClass.push("");
								break;
						}
					}
				}
			}
			var visibleColumnCount = cellType.length
					- visibleColumnCountReduction;

			var result = {
				height : 9000,
				width : Math.floor(totalWidthInPixels * 30) + 50
			};

			var rowCount = 0;
			var it = this.store.data.items;
			if (!notIncludeData){
				
				if (this.local == true) {
					it = [];
					Ext.iterate(this.store.mainData.baseData, function(k, v) {
								it.push(v);
								rowCount++;
							});
							rowCount+=2;
				}else{
					rowCount = (this.store.getCount() + 2);
				}
				
			}
			else
				rowCount = "rowCountToreplace";
			// Generate worksheet header details.
			var t = '<ss:Worksheet ss:Name="' + this.title + '">' + '<ss:Names>'
				+ '<ss:NamedRange ss:Name="Print_Titles" ss:RefersTo="=\''
				+ this.title + '\'!R1:R2" />' + '</ss:Names>'
				+ '<ss:Table x:FullRows="1" x:FullColumns="1"'
				+ ' ss:ExpandedColumnCount="' + (visibleColumnCount + 2)
				+ '" ss:ExpandedRowCount="' + rowCount + '">' + colXml
				// + '<ss:Row ss:Height="38">'
				// + '<ss:Cell ss:StyleID="title" ss:MergeAcross="'
				// + (visibleColumnCount - 1)
				// + '">'
				// + '<ss:Data xmlns:html="http://www.w3.org/TR/REC-html40"
				// ss:Type="String">'
				// // + '<html:B>Generated by
				// ExtJS</html:B></ss:Data><ss:NamedCell
				// // ss:Name="Print_Titles" />'
				// + '<html:B></html:B></ss:Data><ss:NamedCell
				// ss:Name="Print_Titles" />'
				// + '</ss:Cell>' + '</ss:Row>'
				+ '<ss:Row ss:AutoFitHeight="1">' + headerXml + '</ss:Row>';

			// Generate the data rows from the data in the Store
			if (!notIncludeData) {
				for (var i = 0, l = it.length; i < l; i++) {
					t += '<ss:Row>';
					var cellClass = (i & 1) ? 'odd' : 'even';
					r = this.local && it[i] || it[i].data;
					// alert(Ext.encode(r));
					var k = 0;
					for (var j = 0; j < colCount; j++) {
						if ((cm.getDataIndex(j) != '')
								&& (includeHidden || !cm.isHidden(j))) {
							var v = "";
							if (cm.getRenderer(j)) {
								// v = cm.getRenderer(j)(r[cm.getDataIndex(j)],
								// null, new Ext.data.Record(r))
								// + "";
								v = cm.getRenderer(j).call(cm.config[j],
										r[cm.getDataIndex(j)], null,
										new Ext.data.Record(r))
										+ "";
								v = v.replace(/<.*?>/g, "");
								v = v.replace(/.*?>/g, "");
							} else {
								v = r[cm.getDataIndex(j)];
							}

							if (cellType[k] !== "None") {
								t += '<ss:Cell ss:StyleID="' + cellClass
										+ cellTypeClass[k]
										+ '"><ss:Data ss:Type="' + cellType[k]
										+ '">';
								if (cellType[k] == 'DateTime') {
									t += v.format('Y-m-d');
								} else {
									t += v;
								}
								t += '</ss:Data></ss:Cell>';
							}
							k++;
						}
					}
					t += '</ss:Row>';
				}
			} else {
				if (!data) {
					for (var i = 0, it = data.baseData, l = it.length; i < l; i++) {
						t += '<ss:Row>';
						var cellClass = (i & 1) ? 'odd' : 'even';
						r = it[i];
						var k = 0;
						for (var j = 0; j < colCount; j++) {
							if ((cm.getDataIndex(j) != '')
									&& (includeHidden || !cm.isHidden(j))) {
								var v = "";
								if (cm.getRenderer(j)) {
									v = cm.getRenderer(j)(
											r[cm.getDataIndex(j)], null,
											new Ext.data.Record(r))
											+ "";
									v = v.replace(/<.*?>/g, "");
									v = v.replace(/.*?>/g, "");
								} else {
									v = r[cm.getDataIndex(j)];
								}

								if (cellType[k] !== "None") {
									t += '<ss:Cell ss:StyleID="' + cellClass
											+ cellTypeClass[k]
											+ '"><ss:Data ss:Type="'
											+ cellType[k] + '">';
									if (cellType[k] == 'DateTime') {
										t += v.format('Y-m-d');
									} else {
										t += v;
									}
									t += '</ss:Data></ss:Cell>';
								}
								k++;
							}
						}
						t += '</ss:Row>';
					}
				}
			}

			result.xml = t
					+ '</ss:Table>'
					+ '<x:WorksheetOptions>'
					+ '<x:PageSetup>'
					+ '<x:Layout x:CenterHorizontal="1" x:Orientation="Landscape" />'
					+ '<x:Footer x:Data="Page &amp;P of &amp;N" x:Margin="0.5" />'
					+ '<x:PageMargins x:Top="0.5" x:Right="0.5" x:Left="0.5" x:Bottom="0.8" />'
					+ '</x:PageSetup>' + '<x:FitToPage />' + '<x:Print>'
					+ '<x:PrintErrors>Blank</x:PrintErrors>'
					+ '<x:FitWidth>1</x:FitWidth>'
					+ '<x:FitHeight>32767</x:FitHeight>'
					+ '<x:ValidPrinterInfo />'
					+ '<x:VerticalResolution>600</x:VerticalResolution>'
					+ '</x:Print>' + '<x:Selected />'
					+ '<x:DoNotDisplayGridlines />'
					+ '<x:ProtectObjects>False</x:ProtectObjects>'
					+ '<x:ProtectScenarios>False</x:ProtectScenarios>'
					+ '</x:WorksheetOptions>' + '</ss:Worksheet>';
//					var win=window.open("","");
//					win.document.open();
//					win.document.write(result.xml);
//					win.document.close();
			return result;
		}
	};